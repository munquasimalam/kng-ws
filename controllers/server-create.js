const fs = require('fs');
const mysql = require('mysql');
const config = require('../config/config');

const db = mysql.createConnection(config.mysqldb);

const mySQLParams = {
    SMALLINT:/smallint[(]+[0-9]+[)]/g,
    INT:/int[(]+[0-9]+[)]/g,
    UNASIGNED: /unsigned/g,
    TINYTEXT: /tinytext/g,
    BACKTICKS: /`/g,
    AUTO_INCREMENT: /AUTO_INCREMENT/g,
    TABLE: 'TABLE',
    CHARACTER_SET_LATIN1: /CHARACTER SET latin1/g,
    COLLATE: /COLLATE/g,
    LATIN1_BIN: /latin1_bin/g,
    LONGTEXT: /longtext/g,
    MEDIUMTEXT: /mediumtext/g,
    LONGBLOB: /longblob/g,
    DOUBLE: /double/g,
    BIGINTEGER: /bigint[(]+[0-9]+[)]/g,
    DOUBLE: /double/g,
    TINYINTEGER: /tinyint[(]+[0-9]+[)]/g
}

const hanaSQLParams = {
    SMALLINT:'SMALLINT',
    INTEGER:'INTEGER',
    IDENTITY:"GENERATED BY DEFAULT AS IDENTITY",
    VARCHARTEN: "VARCHAR(10)",
    VARCHARMAX: "VARCHAR(5000)",
    VARCHARMEDIUM: "VARCHAR(2500)",
    COLUMN_TABLE: 'COLUMN TABLE',
    BLOB: 'BLOB',
    DECIMAL: 'DECIMAL',
    BIGINT: 'BIGINT',
    TINYINT: 'TinyINT',
    BLANK: '',
}

function dbConnect(){
    return new Promise((resolve,reject)=>{
        db.connect((err)=>{
            if(err) {
                // console.log(err);
                return reject(err);
            }
            console.log("my sql connection established");
            resolve();
        });
    });
}

function dbDisconnect(){
    db.destroy()
    console.log("disconnected");
}


function showTableColumn(table){
    // const query = "SHOW COLUMNS FROM eclinic_hmc." + table + ";";
    const query = "DESCRIBE " + table + ";";
    return new Promise((resolve,reject)=>{
        db.query(query,(err,definition)=>{
            if(err) return reject(err.sqlMessage);
            // console.log(definition);
            return resolve(definition);
        })
    });
}
function showTableNames(){
    // const query = "select TABLE_NAME from information_schema.tables where table_schema = database() AND TABLE_TYPE != 'VIEW';"
    const query = "SHOW TABLES"
    return new Promise((resolve, reject)=>{
        db.query(query,(err,tables)=>{
            if(err) return reject(err.sqlMessage);
            return resolve(tables);
            // return resolve([
            //     // {"Tables_in_eclinic_hmc":"EQP_RESULTS"},
            //     // {"Tables_in_eclinic_hmc":"MULTIPLEMAPPING"},
            //     // {"Tables_in_eclinic_hmc":"TEST_RESULTS"},
            //     //----------
            //     // {"Tables_in_eclinic_hmc":"ITEM_STOCK"},
            //     // {"Tables_in_eclinic_hmc":"ATTENDANCE_SHEET"},
            //     // {"Tables_in_eclinic_hmc":"EQP_RESULTS"}
            // ])
        })
    });
}

async function getTables(){
    let dbConn, tables;
    try {
        dbConn = await dbConnect();
        tables = await showTableNames();
    } catch (error) {
        console.log(error);
        dbDisconnect();
        return;
        // LOG ERROR
    }

    done(tables);
}

function done(tables){
    const columnName = "Tables_in_" + config.mysqldb.database;
    let cS = "";

    tables.forEach(async (table) => {
        // let createStatement = 'CREATE COLUMN TABLE "' + config.db.database + '"."' + table[columnName] + '" (\n',
        let createStatement = 'CREATE COLUMN TABLE "ECLINIC_KNG"."' + table[columnName].toUpperCase() + '" (\n',
        keys = [];
        try {
            columns = await showTableColumn(table[columnName]);
        } catch (error) {
            console.log(error);
        }
        if(Array.isArray(columns)){
            // console.log(columns);
            columns.forEach(col=>{
                createStatement = createStatement + hanaColumnDefinition(col).trim() + ',\n';
                // console.log(createStatement);
                keys = checkKey(col.Key,col.Field.toUpperCase(),keys);
            });
            // console.log(keys);
            if(keys.length)
                createStatement = createStatement + 'PRIMARY KEY ("' + keys.join("\",\"") +'"),\n';
            createStatement = createStatement.substring(0, createStatement.length - 2) + ");\n";
            // cS += createStatement;
            // console.log(createStatement);
            createFile("D:/alam/SapHana/kng/sql/create/"+ table[columnName]+ ".sql", createStatement);
        } 
    });

    console.log(cS);
}

function createFile(path,content){
    fs.writeFile(path,content,(err)=>{
        if(err) console.log(err);

        console.log("file saved at", path);
    });
}

function hanaColumnDefinition(colObj){
    // console.log(col.Field.toUpperCase(), hanaColType(col.Type), checkNotNull(col.Null), defaultValue(col.Default));    
    return '"'+ colObj.Field.toUpperCase() +'" ' 
            + hanaColType(colObj.Type) 
            + checkNotNull(colObj.Null) 
            + checkDefaultValue(colObj.Default, colObj.Type) 
            + checkExtra(colObj.Extra); 
}

function checkNotNull(nullCheck){
    return (nullCheck.toUpperCase() == "NO") ? "NOT NULL " : ""
}

function checkKey(key, column, keys){
    // console.log(keys, column);
    switch (key) {
        case "PRI":
            keys.push(column.toString());
            break;
        default:
            break;
    }
    // console.log(keys, column);
    return keys;
}

function checkDefaultValue(defaultV, type){
    if(defaultV){
        if(type.toUpperCase() == "TIMESTAMP" && defaultV == "CURRENT_TIMESTAMP"){
            return "DEFAULT CURRENT_TIMESTAMP ";
        }
        
        else if(type.toUpperCase() == "DATETIME" && defaultV == "CURRENT_TIMESTAMP")
            return "DEFAULT CURRENT_DATE ";

        else if(parseInt(defaultV) || defaultV == "0")
            return "DEFAULT " + defaultV +" "
        else
            return "DEFAULT '" + defaultV +"' "
    }
   
    else
        return " ";
}

function checkExtra(extra){
    let returnExtra = "";
    switch (extra) {
        case "auto_increment":
            returnExtra = hanaSQLParams.IDENTITY;
            break;
        default:
            break;
    }
    return returnExtra;
}

function hanaColType(type){
    // console.log(type);
    type = type.replace(mySQLParams.SMALLINT, hanaSQLParams.SMALLINT);
    type = type.replace(mySQLParams.TINYINTEGER, hanaSQLParams.TINYINT);
    type = type.replace(mySQLParams.BIGINTEGER, hanaSQLParams.BIGINT);
    type = type.replace(mySQLParams.INT, hanaSQLParams.INTEGER);
    type = type.replace(mySQLParams.AUTO_INCREMENT, hanaSQLParams.IDENTITY)
    type = type.replace(mySQLParams.TINYTEXT, hanaSQLParams.VARCHARTEN);
    type = type.replace(mySQLParams.LONGTEXT, hanaSQLParams.VARCHARMAX);
    type = type.replace(mySQLParams.MEDIUMTEXT, hanaSQLParams.VARCHARMEDIUM);
    type = type.replace(mySQLParams.UNASIGNED, hanaSQLParams.BLANK);
    type = type.replace(mySQLParams.CHARACTER_SET_LATIN1, hanaSQLParams.BLANK);
    type = type.replace(mySQLParams.LATIN1_BIN, hanaSQLParams.BLANK);
    type = type.replace(mySQLParams.COLLATE, hanaSQLParams.BLANK);
    type = type.replace(mySQLParams.LONGBLOB, hanaSQLParams.BLOB);
    type = type.replace(mySQLParams.DOUBLE, hanaSQLParams.DECIMAL);
    // console.log(type);
    return type.toUpperCase() + " ";
}

getTables();